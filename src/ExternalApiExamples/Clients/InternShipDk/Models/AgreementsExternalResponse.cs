// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Kmd.Studica.InternshipDk.Client.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// AgreementsExternalResponse
    /// </summary>
    public partial class AgreementsExternalResponse
    {
        /// <summary>
        /// Initializes a new instance of the AgreementsExternalResponse class.
        /// </summary>
        public AgreementsExternalResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AgreementsExternalResponse class.
        /// </summary>
        /// <param name="studentId">Guid</param>
        /// <param name="agreementId">Guid</param>
        /// <param name="educationVersion">Int32</param>
        /// <param name="educationStartDate">Date</param>
        /// <param name="agreementStartDate">Date</param>
        /// <param name="agreementEndDate">Date</param>
        /// <param name="agreementType">ApprenticeshipAgreementType</param>
        /// <param name="coesaPurpose">String</param>
        /// <param name="speciality">String</param>
        /// <param name="studentType">String</param>
        /// <param name="entryRoute">String</param>
        /// <param name="educationExpectedEndDate">Expected end date of the
        /// education the agreement belongs to.</param>
        /// <param name="comment">String</param>
        /// <param name="educationalAgreementType">Type of educational
        /// agreement, if AgreementType is EducationalAgreement.
        /// If not, then it's null. Possible values include:
        /// 'SubagreementInCombinationagreement',
        /// 'SubagreementInPreparationforBasiceducationEud',
        /// 'SubagreementInSchoolinternship', 'ShortAgreement',
        /// 'OrdinaryAgreement', 'RemainingAgreement'</param>
        /// <param name="fguEudProgrammeAgreementId">Id of the Fgu Eud
        /// programme agreement, if there is any.</param>
        /// <param name="companyName">String</param>
        /// <param name="companyAddress">String</param>
        /// <param name="companyCountryCode">String</param>
        /// <param name="signedDate">Date when the agreement was
        /// signed.</param>
        /// <param name="receivedDate">Date when the agreement was
        /// received.</param>
        /// <param name="completedRegistrationDate">Date when the agreement
        /// registration was completed.</param>
        /// <param name="creditPreApprovedDate">Date when the credit was pre
        /// approved.</param>
        /// <param name="creditFinalApprovedDate">Date when the credit got the
        /// final approval.</param>
        /// <param name="cvrNumber">String</param>
        /// <param name="pNumber">String</param>
        /// <param name="seNumber">String</param>
        /// <param name="causeOfCompletion">Cause of completion of the
        /// agreement. Possible values include: 'Terminated', 'Finished',
        /// 'StudentDeceased', 'FinishedNotSkilled', 'FinishedSkilled',
        /// 'PresumedTerminated', 'RepealedAfterTrialPeriodByMutualAgreement',
        /// 'RepealedAfterTrialPeriodByStudent',
        /// 'RepealedAfterTrialPeriodByCompany',
        /// 'RepealedAfterTrialPeriodTerminatingPartyUnknown',
        /// 'RepealedDuringTrial', 'CompetenceAssessmentCompleted',
        /// 'RepealedByProfessionalCommittee', 'TerminatedDueToOtherReason',
        /// 'TerminatedDueToOtherEducation', 'TerminatedDueToPaidWork',
        /// 'AgreementFulfilled', 'LeaveOfAbsenceForInternshipAbroad',
        /// 'PersonEvaluatedNotEmmaAfterStart', 'RepealedBeforeStart'</param>
        /// <param name="combinationAgreementId">If specified, then the id of
        /// the agreement used in combination with this agreement.</param>
        /// <param name="supplementAgreementInformation">If specified, then
        /// adds supplementary information about this agreement.</param>
        /// <param name="agreementSchoolInstitutionNumber">String</param>
        /// <param name="agreementDepartmentInstitutionNumber">String</param>
        public AgreementsExternalResponse(System.Guid studentId, System.Guid agreementId, int educationVersion, System.DateTime educationStartDate, System.DateTime agreementStartDate, System.DateTime agreementEndDate, string agreementType, string coesaPurpose = default(string), string speciality = default(string), string studentType = default(string), string entryRoute = default(string), System.DateTime? educationExpectedEndDate = default(System.DateTime?), string comment = default(string), string educationalAgreementType = default(string), System.Guid? fguEudProgrammeAgreementId = default(System.Guid?), string companyName = default(string), string companyAddress = default(string), string companyCountryCode = default(string), System.DateTime? signedDate = default(System.DateTime?), System.DateTime? receivedDate = default(System.DateTime?), System.DateTime? completedRegistrationDate = default(System.DateTime?), System.DateTime? creditPreApprovedDate = default(System.DateTime?), System.DateTime? creditFinalApprovedDate = default(System.DateTime?), string cvrNumber = default(string), string pNumber = default(string), string seNumber = default(string), string causeOfCompletion = default(string), System.Guid? combinationAgreementId = default(System.Guid?), IList<string> supplementAgreementInformation = default(IList<string>), string agreementSchoolInstitutionNumber = default(string), string agreementDepartmentInstitutionNumber = default(string))
        {
            StudentId = studentId;
            AgreementId = agreementId;
            CoesaPurpose = coesaPurpose;
            Speciality = speciality;
            EducationVersion = educationVersion;
            StudentType = studentType;
            EntryRoute = entryRoute;
            EducationStartDate = educationStartDate;
            EducationExpectedEndDate = educationExpectedEndDate;
            AgreementStartDate = agreementStartDate;
            AgreementEndDate = agreementEndDate;
            Comment = comment;
            AgreementType = agreementType;
            EducationalAgreementType = educationalAgreementType;
            FguEudProgrammeAgreementId = fguEudProgrammeAgreementId;
            CompanyName = companyName;
            CompanyAddress = companyAddress;
            CompanyCountryCode = companyCountryCode;
            SignedDate = signedDate;
            ReceivedDate = receivedDate;
            CompletedRegistrationDate = completedRegistrationDate;
            CreditPreApprovedDate = creditPreApprovedDate;
            CreditFinalApprovedDate = creditFinalApprovedDate;
            CvrNumber = cvrNumber;
            PNumber = pNumber;
            SeNumber = seNumber;
            CauseOfCompletion = causeOfCompletion;
            CombinationAgreementId = combinationAgreementId;
            SupplementAgreementInformation = supplementAgreementInformation;
            AgreementSchoolInstitutionNumber = agreementSchoolInstitutionNumber;
            AgreementDepartmentInstitutionNumber = agreementDepartmentInstitutionNumber;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets guid
        /// </summary>
        /// <remarks>
        /// Id of the student.
        /// </remarks>
        [JsonProperty(PropertyName = "studentId")]
        public System.Guid StudentId { get; set; }

        /// <summary>
        /// Gets or sets guid
        /// </summary>
        /// <remarks>
        /// Id of the agreement.
        /// </remarks>
        [JsonProperty(PropertyName = "agreementId")]
        public System.Guid AgreementId { get; set; }

        /// <summary>
        /// Gets or sets string
        /// </summary>
        /// <remarks>
        /// Coesa purpose code of the education the agreement belongs to.
        /// </remarks>
        [JsonProperty(PropertyName = "coesaPurpose")]
        public string CoesaPurpose { get; set; }

        /// <summary>
        /// Gets or sets string
        /// </summary>
        /// <remarks>
        /// Speciality of the agreement.
        /// </remarks>
        [JsonProperty(PropertyName = "speciality")]
        public string Speciality { get; set; }

        /// <summary>
        /// Gets or sets int32
        /// </summary>
        /// <remarks>
        /// Version of the education the agreement belongs to.
        /// </remarks>
        [JsonProperty(PropertyName = "educationVersion")]
        public int EducationVersion { get; set; }

        /// <summary>
        /// Gets or sets string
        /// </summary>
        /// <remarks>
        /// Student type the agreement is associated with.
        /// </remarks>
        [JsonProperty(PropertyName = "studentType")]
        public string StudentType { get; set; }

        /// <summary>
        /// Gets or sets string
        /// </summary>
        /// <remarks>
        /// Entry route the agreement is associated with.
        /// </remarks>
        [JsonProperty(PropertyName = "entryRoute")]
        public string EntryRoute { get; set; }

        /// <summary>
        /// Gets or sets date
        /// </summary>
        /// <remarks>
        /// Start date of the education the agreement belongs to.
        /// </remarks>
        [JsonConverter(typeof(DateJsonConverter))]
        [JsonProperty(PropertyName = "educationStartDate")]
        public System.DateTime EducationStartDate { get; set; }

        /// <summary>
        /// Gets or sets expected end date of the education the agreement
        /// belongs to.
        /// </summary>
        [JsonConverter(typeof(DateJsonConverter))]
        [JsonProperty(PropertyName = "educationExpectedEndDate")]
        public System.DateTime? EducationExpectedEndDate { get; set; }

        /// <summary>
        /// Gets or sets date
        /// </summary>
        /// <remarks>
        /// Start date of the agreement.
        /// </remarks>
        [JsonConverter(typeof(DateJsonConverter))]
        [JsonProperty(PropertyName = "agreementStartDate")]
        public System.DateTime AgreementStartDate { get; set; }

        /// <summary>
        /// Gets or sets date
        /// </summary>
        /// <remarks>
        /// End date of the agreement.
        /// </remarks>
        [JsonConverter(typeof(DateJsonConverter))]
        [JsonProperty(PropertyName = "agreementEndDate")]
        public System.DateTime AgreementEndDate { get; set; }

        /// <summary>
        /// Gets or sets string
        /// </summary>
        /// <remarks>
        /// Comment on the agreement.
        /// </remarks>
        [JsonProperty(PropertyName = "comment")]
        public string Comment { get; set; }

        /// <summary>
        /// Gets or sets apprenticeshipAgreementType
        /// </summary>
        /// <remarks>
        /// Type of agreement. Possible values include: 'EducationalAgreement',
        /// 'CombinationAgreement', 'SchoolInternshipAgreement',
        /// 'InternshipAbroadAgreement', 'FguEudProgrammeAgreement',
        /// 'CompanyPlacedInternshipAgreement',
        /// 'CompanyPlacedInternshipAbroadAgreement', 'Breaks'
        /// </remarks>
        [JsonProperty(PropertyName = "agreementType")]
        public string AgreementType { get; set; }

        /// <summary>
        /// Gets or sets type of educational agreement, if AgreementType is
        /// EducationalAgreement.
        /// If not, then it's null. Possible values include:
        /// 'SubagreementInCombinationagreement',
        /// 'SubagreementInPreparationforBasiceducationEud',
        /// 'SubagreementInSchoolinternship', 'ShortAgreement',
        /// 'OrdinaryAgreement', 'RemainingAgreement'
        /// </summary>
        [JsonProperty(PropertyName = "educationalAgreementType")]
        public string EducationalAgreementType { get; set; }

        /// <summary>
        /// Gets or sets id of the Fgu Eud programme agreement, if there is
        /// any.
        /// </summary>
        [JsonProperty(PropertyName = "fguEudProgrammeAgreementId")]
        public System.Guid? FguEudProgrammeAgreementId { get; set; }

        /// <summary>
        /// Gets or sets string
        /// </summary>
        /// <remarks>
        /// Name of the company associated to the agreement.
        /// </remarks>
        [JsonProperty(PropertyName = "companyName")]
        public string CompanyName { get; set; }

        /// <summary>
        /// Gets or sets string
        /// </summary>
        /// <remarks>
        /// Address of the company associated to the agreement.
        /// </remarks>
        [JsonProperty(PropertyName = "companyAddress")]
        public string CompanyAddress { get; set; }

        /// <summary>
        /// Gets or sets string
        /// </summary>
        /// <remarks>
        /// Country code of the company associated to the agreement.
        /// </remarks>
        [JsonProperty(PropertyName = "companyCountryCode")]
        public string CompanyCountryCode { get; set; }

        /// <summary>
        /// Gets or sets date when the agreement was signed.
        /// </summary>
        [JsonConverter(typeof(DateJsonConverter))]
        [JsonProperty(PropertyName = "signedDate")]
        public System.DateTime? SignedDate { get; set; }

        /// <summary>
        /// Gets or sets date when the agreement was received.
        /// </summary>
        [JsonConverter(typeof(DateJsonConverter))]
        [JsonProperty(PropertyName = "receivedDate")]
        public System.DateTime? ReceivedDate { get; set; }

        /// <summary>
        /// Gets or sets date when the agreement registration was completed.
        /// </summary>
        [JsonConverter(typeof(DateJsonConverter))]
        [JsonProperty(PropertyName = "completedRegistrationDate")]
        public System.DateTime? CompletedRegistrationDate { get; set; }

        /// <summary>
        /// Gets or sets date when the credit was pre approved.
        /// </summary>
        [JsonConverter(typeof(DateJsonConverter))]
        [JsonProperty(PropertyName = "creditPreApprovedDate")]
        public System.DateTime? CreditPreApprovedDate { get; set; }

        /// <summary>
        /// Gets or sets date when the credit got the final approval.
        /// </summary>
        [JsonConverter(typeof(DateJsonConverter))]
        [JsonProperty(PropertyName = "creditFinalApprovedDate")]
        public System.DateTime? CreditFinalApprovedDate { get; set; }

        /// <summary>
        /// Gets or sets string
        /// </summary>
        /// <remarks>
        /// Cvr number.
        /// </remarks>
        [JsonProperty(PropertyName = "cvrNumber")]
        public string CvrNumber { get; set; }

        /// <summary>
        /// Gets or sets string
        /// </summary>
        /// <remarks>
        /// PNumber
        /// </remarks>
        [JsonProperty(PropertyName = "pNumber")]
        public string PNumber { get; set; }

        /// <summary>
        /// Gets or sets string
        /// </summary>
        /// <remarks>
        /// SeNumber
        /// </remarks>
        [JsonProperty(PropertyName = "seNumber")]
        public string SeNumber { get; set; }

        /// <summary>
        /// Gets or sets cause of completion of the agreement. Possible values
        /// include: 'Terminated', 'Finished', 'StudentDeceased',
        /// 'FinishedNotSkilled', 'FinishedSkilled', 'PresumedTerminated',
        /// 'RepealedAfterTrialPeriodByMutualAgreement',
        /// 'RepealedAfterTrialPeriodByStudent',
        /// 'RepealedAfterTrialPeriodByCompany',
        /// 'RepealedAfterTrialPeriodTerminatingPartyUnknown',
        /// 'RepealedDuringTrial', 'CompetenceAssessmentCompleted',
        /// 'RepealedByProfessionalCommittee', 'TerminatedDueToOtherReason',
        /// 'TerminatedDueToOtherEducation', 'TerminatedDueToPaidWork',
        /// 'AgreementFulfilled', 'LeaveOfAbsenceForInternshipAbroad',
        /// 'PersonEvaluatedNotEmmaAfterStart', 'RepealedBeforeStart'
        /// </summary>
        [JsonProperty(PropertyName = "causeOfCompletion")]
        public string CauseOfCompletion { get; set; }

        /// <summary>
        /// Gets or sets if specified, then the id of the agreement used in
        /// combination with this agreement.
        /// </summary>
        [JsonProperty(PropertyName = "combinationAgreementId")]
        public System.Guid? CombinationAgreementId { get; set; }

        /// <summary>
        /// Gets or sets if specified, then adds supplementary information
        /// about this agreement.
        /// </summary>
        [JsonProperty(PropertyName = "supplementAgreementInformation")]
        public IList<string> SupplementAgreementInformation { get; set; }

        /// <summary>
        /// Gets or sets string
        /// </summary>
        /// <remarks>
        /// Institution number of the school the agreement is associated with.
        /// </remarks>
        [JsonProperty(PropertyName = "agreementSchoolInstitutionNumber")]
        public string AgreementSchoolInstitutionNumber { get; set; }

        /// <summary>
        /// Gets or sets string
        /// </summary>
        /// <remarks>
        /// Institution number of the department the agreement is associated
        /// with.
        /// </remarks>
        [JsonProperty(PropertyName = "agreementDepartmentInstitutionNumber")]
        public string AgreementDepartmentInstitutionNumber { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (AgreementType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AgreementType");
            }
        }
    }
}
