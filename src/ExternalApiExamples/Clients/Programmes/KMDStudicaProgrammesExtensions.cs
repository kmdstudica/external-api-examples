// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Kmd.Studica.Programmes.Client
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for KMDStudicaProgrammes.
    /// </summary>
    public static partial class KMDStudicaProgrammesExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xSelectedSchoolCode'>
            /// Selected school code, used when multiple impersonation permissions are
            /// available on the token
            /// </param>
            /// <param name='body'>
            /// </param>
            public static PagedResponseAbsenceRegistrationExternalResponse Post(this IKMDStudicaProgrammes operations, string xSelectedSchoolCode = default(string), AbsenceRegistrationsExternalRequest body = default(AbsenceRegistrationsExternalRequest))
            {
                return operations.PostAsync(xSelectedSchoolCode, body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xSelectedSchoolCode'>
            /// Selected school code, used when multiple impersonation permissions are
            /// available on the token
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PagedResponseAbsenceRegistrationExternalResponse> PostAsync(this IKMDStudicaProgrammes operations, string xSelectedSchoolCode = default(string), AbsenceRegistrationsExternalRequest body = default(AbsenceRegistrationsExternalRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostWithHttpMessagesAsync(xSelectedSchoolCode, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xSelectedSchoolCode'>
            /// Selected school code, used when multiple impersonation permissions are
            /// available on the token
            /// </param>
            /// <param name='body'>
            /// </param>
            public static PagedResponseSubjectCourseExternalResponse Post1(this IKMDStudicaProgrammes operations, string xSelectedSchoolCode = default(string), ActiveSubjectCoursesExternalRequest body = default(ActiveSubjectCoursesExternalRequest))
            {
                return operations.Post1Async(xSelectedSchoolCode, body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xSelectedSchoolCode'>
            /// Selected school code, used when multiple impersonation permissions are
            /// available on the token
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PagedResponseSubjectCourseExternalResponse> Post1Async(this IKMDStudicaProgrammes operations, string xSelectedSchoolCode = default(string), ActiveSubjectCoursesExternalRequest body = default(ActiveSubjectCoursesExternalRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Post1WithHttpMessagesAsync(xSelectedSchoolCode, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xSelectedSchoolCode'>
            /// Selected school code, used when multiple impersonation permissions are
            /// available on the token
            /// </param>
            /// <param name='body'>
            /// </param>
            public static IList<AbsenceRegistrationExternalResponse> Post2(this IKMDStudicaProgrammes operations, string xSelectedSchoolCode = default(string), BulkAbsenceRegistrationsExternalRequest body = default(BulkAbsenceRegistrationsExternalRequest))
            {
                return operations.Post2Async(xSelectedSchoolCode, body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xSelectedSchoolCode'>
            /// Selected school code, used when multiple impersonation permissions are
            /// available on the token
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<AbsenceRegistrationExternalResponse>> Post2Async(this IKMDStudicaProgrammes operations, string xSelectedSchoolCode = default(string), BulkAbsenceRegistrationsExternalRequest body = default(BulkAbsenceRegistrationsExternalRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Post2WithHttpMessagesAsync(xSelectedSchoolCode, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xSelectedSchoolCode'>
            /// Selected school code, used when multiple impersonation permissions are
            /// available on the token
            /// </param>
            /// <param name='body'>
            /// </param>
            public static PagedResponseEducationalProgrammeExternalResponse Post3(this IKMDStudicaProgrammes operations, string xSelectedSchoolCode = default(string), EducationalProgrammesExternalRequest body = default(EducationalProgrammesExternalRequest))
            {
                return operations.Post3Async(xSelectedSchoolCode, body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xSelectedSchoolCode'>
            /// Selected school code, used when multiple impersonation permissions are
            /// available on the token
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PagedResponseEducationalProgrammeExternalResponse> Post3Async(this IKMDStudicaProgrammes operations, string xSelectedSchoolCode = default(string), EducationalProgrammesExternalRequest body = default(EducationalProgrammesExternalRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Post3WithHttpMessagesAsync(xSelectedSchoolCode, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='schoolCode'>
            /// String The school code for which to get data.
            /// </param>
            /// <param name='xSelectedSchoolCode'>
            /// Selected school code, used when multiple impersonation permissions are
            /// available on the token
            /// </param>
            public static HelloWorldExternalResponse Post4(this IKMDStudicaProgrammes operations, string schoolCode, string xSelectedSchoolCode = default(string))
            {
                return operations.Post4Async(schoolCode, xSelectedSchoolCode).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='schoolCode'>
            /// String The school code for which to get data.
            /// </param>
            /// <param name='xSelectedSchoolCode'>
            /// Selected school code, used when multiple impersonation permissions are
            /// available on the token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HelloWorldExternalResponse> Post4Async(this IKMDStudicaProgrammes operations, string schoolCode, string xSelectedSchoolCode = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Post4WithHttpMessagesAsync(schoolCode, xSelectedSchoolCode, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xSelectedSchoolCode'>
            /// Selected school code, used when multiple impersonation permissions are
            /// available on the token
            /// </param>
            /// <param name='body'>
            /// </param>
            public static PagedResponseLessonExternalResponse Post5(this IKMDStudicaProgrammes operations, string xSelectedSchoolCode = default(string), LessonsExternalRequest body = default(LessonsExternalRequest))
            {
                return operations.Post5Async(xSelectedSchoolCode, body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xSelectedSchoolCode'>
            /// Selected school code, used when multiple impersonation permissions are
            /// available on the token
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PagedResponseLessonExternalResponse> Post5Async(this IKMDStudicaProgrammes operations, string xSelectedSchoolCode = default(string), LessonsExternalRequest body = default(LessonsExternalRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Post5WithHttpMessagesAsync(xSelectedSchoolCode, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xSelectedSchoolCode'>
            /// Selected school code, used when multiple impersonation permissions are
            /// available on the token
            /// </param>
            /// <param name='body'>
            /// </param>
            public static PagedResponseSchoolCourseExternalResponse Post6(this IKMDStudicaProgrammes operations, string xSelectedSchoolCode = default(string), SchoolCoursesExternalRequest body = default(SchoolCoursesExternalRequest))
            {
                return operations.Post6Async(xSelectedSchoolCode, body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xSelectedSchoolCode'>
            /// Selected school code, used when multiple impersonation permissions are
            /// available on the token
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PagedResponseSchoolCourseExternalResponse> Post6Async(this IKMDStudicaProgrammes operations, string xSelectedSchoolCode = default(string), SchoolCoursesExternalRequest body = default(SchoolCoursesExternalRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Post6WithHttpMessagesAsync(xSelectedSchoolCode, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xSelectedSchoolCode'>
            /// Selected school code, used when multiple impersonation permissions are
            /// available on the token
            /// </param>
            /// <param name='body'>
            /// </param>
            public static IList<ActivityGroupDto> Post7(this IKMDStudicaProgrammes operations, string xSelectedSchoolCode = default(string), StudentActivityReportsExternalRequest body = default(StudentActivityReportsExternalRequest))
            {
                return operations.Post7Async(xSelectedSchoolCode, body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xSelectedSchoolCode'>
            /// Selected school code, used when multiple impersonation permissions are
            /// available on the token
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ActivityGroupDto>> Post7Async(this IKMDStudicaProgrammes operations, string xSelectedSchoolCode = default(string), StudentActivityReportsExternalRequest body = default(StudentActivityReportsExternalRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Post7WithHttpMessagesAsync(xSelectedSchoolCode, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xSelectedSchoolCode'>
            /// Selected school code, used when multiple impersonation permissions are
            /// available on the token
            /// </param>
            /// <param name='body'>
            /// </param>
            public static IList<ActivityGroup2Dto> Post8(this IKMDStudicaProgrammes operations, string xSelectedSchoolCode = default(string), StudentActivityReportsV2ExternalRequest body = default(StudentActivityReportsV2ExternalRequest))
            {
                return operations.Post8Async(xSelectedSchoolCode, body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xSelectedSchoolCode'>
            /// Selected school code, used when multiple impersonation permissions are
            /// available on the token
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ActivityGroup2Dto>> Post8Async(this IKMDStudicaProgrammes operations, string xSelectedSchoolCode = default(string), StudentActivityReportsV2ExternalRequest body = default(StudentActivityReportsV2ExternalRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Post8WithHttpMessagesAsync(xSelectedSchoolCode, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xSelectedSchoolCode'>
            /// Selected school code, used when multiple impersonation permissions are
            /// available on the token
            /// </param>
            /// <param name='body'>
            /// </param>
            public static IList<StudentInternshipExternalResponse> Post9(this IKMDStudicaProgrammes operations, string xSelectedSchoolCode = default(string), StudentInternshipExternalRequest body = default(StudentInternshipExternalRequest))
            {
                return operations.Post9Async(xSelectedSchoolCode, body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xSelectedSchoolCode'>
            /// Selected school code, used when multiple impersonation permissions are
            /// available on the token
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<StudentInternshipExternalResponse>> Post9Async(this IKMDStudicaProgrammes operations, string xSelectedSchoolCode = default(string), StudentInternshipExternalRequest body = default(StudentInternshipExternalRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Post9WithHttpMessagesAsync(xSelectedSchoolCode, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xSelectedSchoolCode'>
            /// Selected school code, used when multiple impersonation permissions are
            /// available on the token
            /// </param>
            /// <param name='body'>
            /// </param>
            public static IList<StudentSchoolCoursesExternalResponse> Post10(this IKMDStudicaProgrammes operations, string xSelectedSchoolCode = default(string), StudentSchoolCoursesExternalRequest body = default(StudentSchoolCoursesExternalRequest))
            {
                return operations.Post10Async(xSelectedSchoolCode, body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xSelectedSchoolCode'>
            /// Selected school code, used when multiple impersonation permissions are
            /// available on the token
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<StudentSchoolCoursesExternalResponse>> Post10Async(this IKMDStudicaProgrammes operations, string xSelectedSchoolCode = default(string), StudentSchoolCoursesExternalRequest body = default(StudentSchoolCoursesExternalRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Post10WithHttpMessagesAsync(xSelectedSchoolCode, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xSelectedSchoolCode'>
            /// Selected school code, used when multiple impersonation permissions are
            /// available on the token
            /// </param>
            /// <param name='body'>
            /// </param>
            public static PagedResponseStudentSubjectCoursesExternalResponse Post11(this IKMDStudicaProgrammes operations, string xSelectedSchoolCode = default(string), StudentSubjectCoursesExternalRequest body = default(StudentSubjectCoursesExternalRequest))
            {
                return operations.Post11Async(xSelectedSchoolCode, body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xSelectedSchoolCode'>
            /// Selected school code, used when multiple impersonation permissions are
            /// available on the token
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PagedResponseStudentSubjectCoursesExternalResponse> Post11Async(this IKMDStudicaProgrammes operations, string xSelectedSchoolCode = default(string), StudentSubjectCoursesExternalRequest body = default(StudentSubjectCoursesExternalRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Post11WithHttpMessagesAsync(xSelectedSchoolCode, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xSelectedSchoolCode'>
            /// Selected school code, used when multiple impersonation permissions are
            /// available on the token
            /// </param>
            /// <param name='body'>
            /// </param>
            public static PagedResponseSubjectCourseExternalResponse Post12(this IKMDStudicaProgrammes operations, string xSelectedSchoolCode = default(string), SubjectCoursesExternalRequest body = default(SubjectCoursesExternalRequest))
            {
                return operations.Post12Async(xSelectedSchoolCode, body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xSelectedSchoolCode'>
            /// Selected school code, used when multiple impersonation permissions are
            /// available on the token
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PagedResponseSubjectCourseExternalResponse> Post12Async(this IKMDStudicaProgrammes operations, string xSelectedSchoolCode = default(string), SubjectCoursesExternalRequest body = default(SubjectCoursesExternalRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Post12WithHttpMessagesAsync(xSelectedSchoolCode, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xSelectedSchoolCode'>
            /// Selected school code, used when multiple impersonation permissions are
            /// available on the token
            /// </param>
            /// <param name='body'>
            /// </param>
            public static PagedResponseUnscheduledLessonExternalResponse Post13(this IKMDStudicaProgrammes operations, string xSelectedSchoolCode = default(string), LessonsExternalRequest body = default(LessonsExternalRequest))
            {
                return operations.Post13Async(xSelectedSchoolCode, body).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='xSelectedSchoolCode'>
            /// Selected school code, used when multiple impersonation permissions are
            /// available on the token
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PagedResponseUnscheduledLessonExternalResponse> Post13Async(this IKMDStudicaProgrammes operations, string xSelectedSchoolCode = default(string), LessonsExternalRequest body = default(LessonsExternalRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.Post13WithHttpMessagesAsync(xSelectedSchoolCode, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
