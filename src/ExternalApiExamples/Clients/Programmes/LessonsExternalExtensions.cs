// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Kmd.Studica.Programmes.Client
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for LessonsExternal.
    /// </summary>
    public static partial class LessonsExternalExtensions
    {
            /// <summary>
            /// LessonsExternal_Get
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pageNumber'>
            /// Format - int32. The number of the page to return (1 is the first page).
            /// </param>
            /// <param name='pageSize'>
            /// Format - int32. Number of objects per page.
            /// </param>
            /// <param name='inlineCount'>
            /// A flag indicating if total number of items should be included.
            /// </param>
            /// <param name='schoolCode'>
            /// The school code for which to get data.
            /// </param>
            /// <param name='departmentId'>
            /// Format - uuid. Department where the lesson is conducted.
            /// </param>
            /// <param name='dateFrom'>
            /// Format - date (as full-date in RFC3339). Beginning of range for lesson
            /// date.
            /// </param>
            /// <param name='dateTo'>
            /// Format - date (as full-date in RFC3339). End of range for lesson date.
            /// </param>
            /// <param name='hasExternalId'>
            /// Flag indicating if lesson contains external id.
            /// </param>
            public static PagedResponseLessonExternalResponse Get(this ILessonsExternal operations, int pageNumber, int pageSize, bool inlineCount, string schoolCode, System.Guid? departmentId = default(System.Guid?), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), bool? hasExternalId = default(bool?))
            {
                return operations.GetAsync(pageNumber, pageSize, inlineCount, schoolCode, departmentId, dateFrom, dateTo, hasExternalId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// LessonsExternal_Get
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pageNumber'>
            /// Format - int32. The number of the page to return (1 is the first page).
            /// </param>
            /// <param name='pageSize'>
            /// Format - int32. Number of objects per page.
            /// </param>
            /// <param name='inlineCount'>
            /// A flag indicating if total number of items should be included.
            /// </param>
            /// <param name='schoolCode'>
            /// The school code for which to get data.
            /// </param>
            /// <param name='departmentId'>
            /// Format - uuid. Department where the lesson is conducted.
            /// </param>
            /// <param name='dateFrom'>
            /// Format - date (as full-date in RFC3339). Beginning of range for lesson
            /// date.
            /// </param>
            /// <param name='dateTo'>
            /// Format - date (as full-date in RFC3339). End of range for lesson date.
            /// </param>
            /// <param name='hasExternalId'>
            /// Flag indicating if lesson contains external id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PagedResponseLessonExternalResponse> GetAsync(this ILessonsExternal operations, int pageNumber, int pageSize, bool inlineCount, string schoolCode, System.Guid? departmentId = default(System.Guid?), System.DateTime? dateFrom = default(System.DateTime?), System.DateTime? dateTo = default(System.DateTime?), bool? hasExternalId = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(pageNumber, pageSize, inlineCount, schoolCode, departmentId, dateFrom, dateTo, hasExternalId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
