// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Kmd.Studica.Programmes.Client.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// ActivitiesExternalRequest
    /// </summary>
    /// <remarks>
    /// Activities and contributions.
    /// Recommended pagesize is 100
    /// </remarks>
    public partial class ActivitiesExternalRequest
    {
        /// <summary>
        /// Initializes a new instance of the ActivitiesExternalRequest class.
        /// </summary>
        public ActivitiesExternalRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ActivitiesExternalRequest class.
        /// </summary>
        /// <param name="periodFrom">Date</param>
        /// <param name="pageNumber">Int32</param>
        /// <param name="pageSize">Int32</param>
        /// <param name="inlineCount">Boolean</param>
        /// <param name="schoolCode">String</param>
        /// <param name="periodTo">Activities must end on or before this date
        /// Property is nullable</param>
        public ActivitiesExternalRequest(System.DateTime periodFrom, int pageNumber, int pageSize, bool inlineCount, string schoolCode, System.DateTime? periodTo = default(System.DateTime?))
        {
            PeriodFrom = periodFrom;
            PeriodTo = periodTo;
            PageNumber = pageNumber;
            PageSize = pageSize;
            InlineCount = inlineCount;
            SchoolCode = schoolCode;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets date
        /// </summary>
        /// <remarks>
        /// Activities start on or after this date
        /// </remarks>
        [JsonConverter(typeof(DateJsonConverter))]
        [JsonProperty(PropertyName = "periodFrom")]
        public System.DateTime PeriodFrom { get; set; }

        /// <summary>
        /// Gets or sets activities must end on or before this date
        /// Property is nullable
        /// </summary>
        [JsonConverter(typeof(DateJsonConverter))]
        [JsonProperty(PropertyName = "periodTo")]
        public System.DateTime? PeriodTo { get; set; }

        /// <summary>
        /// Gets or sets int32
        /// </summary>
        /// <remarks>
        /// The number of the page to return (1 is the first page).
        /// </remarks>
        [JsonProperty(PropertyName = "pageNumber")]
        public int PageNumber { get; set; }

        /// <summary>
        /// Gets or sets int32
        /// </summary>
        /// <remarks>
        /// Number of objects per page.
        /// </remarks>
        [JsonProperty(PropertyName = "pageSize")]
        public int PageSize { get; set; }

        /// <summary>
        /// Gets or sets boolean
        /// </summary>
        /// <remarks>
        /// A flag indicating if total number of items should be included.
        /// </remarks>
        [JsonProperty(PropertyName = "inlineCount")]
        public bool InlineCount { get; set; }

        /// <summary>
        /// Gets or sets string
        /// </summary>
        /// <remarks>
        /// The school code for which to get data.
        /// </remarks>
        [JsonProperty(PropertyName = "schoolCode")]
        public string SchoolCode { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (SchoolCode == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SchoolCode");
            }
            if (PageNumber > 2147483647)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "PageNumber", 2147483647);
            }
            if (PageNumber < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "PageNumber", 1);
            }
            if (PageSize > 1000)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "PageSize", 1000);
            }
            if (PageSize < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "PageSize", 1);
            }
            if (SchoolCode != null)
            {
                if (SchoolCode.Length > 6)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "SchoolCode", 6);
                }
                if (SchoolCode.Length < 6)
                {
                    throw new ValidationException(ValidationRules.MinLength, "SchoolCode", 6);
                }
            }
        }
    }
}
