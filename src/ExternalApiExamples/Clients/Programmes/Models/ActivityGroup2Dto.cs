// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Kmd.Studica.Programmes.Client.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// ActivityGroup2Dto
    /// </summary>
    /// <remarks>
    /// Activity reports for a specific type of activity, within a transmission
    /// period.
    /// </remarks>
    public partial class ActivityGroup2Dto
    {
        /// <summary>
        /// Initializes a new instance of the ActivityGroup2Dto class.
        /// </summary>
        public ActivityGroup2Dto()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ActivityGroup2Dto class.
        /// </summary>
        /// <param name="transmissionPeriodStartDate">Date</param>
        /// <param name="transmissionPeriodEndDate">Date</param>
        /// <param name="exchangeType">ExchangeType</param>
        /// <param name="initialReport">The initial report.</param>
        /// <param name="supplementaryReports">Supplementary reports.</param>
        public ActivityGroup2Dto(System.DateTime transmissionPeriodStartDate, System.DateTime transmissionPeriodEndDate, string exchangeType, ActivityGroup2DtoInitialReport initialReport = default(ActivityGroup2DtoInitialReport), IList<ActivityV2ReportDto> supplementaryReports = default(IList<ActivityV2ReportDto>))
        {
            TransmissionPeriodStartDate = transmissionPeriodStartDate;
            TransmissionPeriodEndDate = transmissionPeriodEndDate;
            ExchangeType = exchangeType;
            InitialReport = initialReport;
            SupplementaryReports = supplementaryReports;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets date
        /// </summary>
        /// <remarks>
        /// Start date of the transmission period
        /// </remarks>
        [JsonConverter(typeof(DateJsonConverter))]
        [JsonProperty(PropertyName = "transmissionPeriodStartDate")]
        public System.DateTime TransmissionPeriodStartDate { get; set; }

        /// <summary>
        /// Gets or sets date
        /// </summary>
        /// <remarks>
        /// End date of the transmission period
        /// </remarks>
        [JsonConverter(typeof(DateJsonConverter))]
        [JsonProperty(PropertyName = "transmissionPeriodEndDate")]
        public System.DateTime TransmissionPeriodEndDate { get; set; }

        /// <summary>
        /// Gets or sets exchangeType
        /// </summary>
        /// <remarks>
        /// The exchange type of the activity group. Possible values include:
        /// 'FullTimeStudents', 'SchoolInternships', 'BoardingFacilities'
        /// </remarks>
        [JsonProperty(PropertyName = "exchangeType")]
        public string ExchangeType { get; set; }

        /// <summary>
        /// Gets or sets the initial report.
        /// </summary>
        [JsonProperty(PropertyName = "initialReport")]
        public ActivityGroup2DtoInitialReport InitialReport { get; set; }

        /// <summary>
        /// Gets or sets supplementary reports.
        /// </summary>
        [JsonProperty(PropertyName = "supplementaryReports")]
        public IList<ActivityV2ReportDto> SupplementaryReports { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ExchangeType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ExchangeType");
            }
            if (InitialReport != null)
            {
                InitialReport.Validate();
            }
            if (SupplementaryReports != null)
            {
                foreach (var element in SupplementaryReports)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
