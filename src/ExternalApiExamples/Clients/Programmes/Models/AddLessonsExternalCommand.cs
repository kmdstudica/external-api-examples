// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Kmd.Studica.Programmes.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// AddLessonsExternalCommand
    /// </summary>
    /// <remarks>
    /// Adds new lessons.
    /// </remarks>
    public partial class AddLessonsExternalCommand
    {
        /// <summary>
        /// Initializes a new instance of the AddLessonsExternalCommand class.
        /// </summary>
        public AddLessonsExternalCommand()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AddLessonsExternalCommand class.
        /// </summary>
        /// <param name="newLessons">New lessons.</param>
        /// <param name="schoolCode">The school code for which command is
        /// performed.</param>
        public AddLessonsExternalCommand(IList<NewLessonExternal> newLessons, string schoolCode)
        {
            NewLessons = newLessons;
            SchoolCode = schoolCode;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets new lessons.
        /// </summary>
        [JsonProperty(PropertyName = "newLessons")]
        public IList<NewLessonExternal> NewLessons { get; set; }

        /// <summary>
        /// Gets or sets the school code for which command is performed.
        /// </summary>
        [JsonProperty(PropertyName = "schoolCode")]
        public string SchoolCode { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (NewLessons == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "NewLessons");
            }
            if (SchoolCode == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SchoolCode");
            }
            if (NewLessons != null)
            {
                foreach (var element in NewLessons)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
