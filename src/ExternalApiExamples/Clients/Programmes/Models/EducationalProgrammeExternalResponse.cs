// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Kmd.Studica.Programmes.Client.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// EducationalProgrammeExternalResponse
    /// </summary>
    /// <remarks>
    /// Model of the educational programme.
    /// </remarks>
    public partial class EducationalProgrammeExternalResponse
    {
        /// <summary>
        /// Initializes a new instance of the
        /// EducationalProgrammeExternalResponse class.
        /// </summary>
        public EducationalProgrammeExternalResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// EducationalProgrammeExternalResponse class.
        /// </summary>
        /// <param name="id">Guid</param>
        /// <param name="name">String</param>
        /// <param name="startDate">Date</param>
        /// <param name="endDate">Date</param>
        /// <param name="departmentId">Guid</param>
        /// <param name="studentsIds">Reference ids to assigned
        /// students.</param>
        /// <param name="participants">The participants for the entire subject
        /// course.</param>
        /// <param name="subjectCourseIds">Reference ids to the subject courses
        /// that are associated with the educational programme</param>
        /// <param name="designation">String</param>
        /// <param name="areaOfResponsibilityId">Reference id of the area of
        /// responsibility.</param>
        /// <param name="areaOfEducationId">Reference id of the area of
        /// education.</param>
        /// <param name="dayCalendarId">Reference id of the day
        /// calendar.</param>
        /// <param name="schoolHoursPlanId">Reference id of the school hours
        /// plan.</param>
        /// <param name="deletedAt">If the educational programme has been
        /// deleted, this property will have a value</param>
        /// <param name="insertedAt">When it was created</param>
        /// <param name="updatedAt">Last update of the educational programme's
        /// basic information</param>
        public EducationalProgrammeExternalResponse(System.Guid id, string name, System.DateTime startDate, System.DateTime endDate, System.Guid departmentId, IList<System.Guid> studentsIds, IList<EducationalProgrammesExternalResponseStudentParticipation> participants, IList<System.Guid> subjectCourseIds, string designation = default(string), System.Guid? areaOfResponsibilityId = default(System.Guid?), System.Guid? areaOfEducationId = default(System.Guid?), System.Guid? dayCalendarId = default(System.Guid?), System.Guid? schoolHoursPlanId = default(System.Guid?), System.DateTime? deletedAt = default(System.DateTime?), System.DateTime? insertedAt = default(System.DateTime?), System.DateTime? updatedAt = default(System.DateTime?))
        {
            Id = id;
            Designation = designation;
            Name = name;
            StartDate = startDate;
            EndDate = endDate;
            AreaOfResponsibilityId = areaOfResponsibilityId;
            AreaOfEducationId = areaOfEducationId;
            DayCalendarId = dayCalendarId;
            SchoolHoursPlanId = schoolHoursPlanId;
            DepartmentId = departmentId;
            StudentsIds = studentsIds;
            Participants = participants;
            SubjectCourseIds = subjectCourseIds;
            DeletedAt = deletedAt;
            InsertedAt = insertedAt;
            UpdatedAt = updatedAt;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets guid
        /// </summary>
        /// <remarks>
        /// Id of the educational programme.
        /// </remarks>
        [JsonProperty(PropertyName = "id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// Gets or sets string
        /// </summary>
        /// <remarks>
        /// The designation (user facing unique id) of the educational
        /// programme
        /// </remarks>
        [JsonProperty(PropertyName = "designation")]
        public string Designation { get; set; }

        /// <summary>
        /// Gets or sets string
        /// </summary>
        /// <remarks>
        /// Name of the educational programme.
        /// </remarks>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets date
        /// </summary>
        /// <remarks>
        /// Start date of the educational programme.
        /// </remarks>
        [JsonConverter(typeof(DateJsonConverter))]
        [JsonProperty(PropertyName = "startDate")]
        public System.DateTime StartDate { get; set; }

        /// <summary>
        /// Gets or sets date
        /// </summary>
        /// <remarks>
        /// End date for the educational programme.
        /// </remarks>
        [JsonConverter(typeof(DateJsonConverter))]
        [JsonProperty(PropertyName = "endDate")]
        public System.DateTime EndDate { get; set; }

        /// <summary>
        /// Gets or sets reference id of the area of responsibility.
        /// </summary>
        [JsonProperty(PropertyName = "areaOfResponsibilityId")]
        public System.Guid? AreaOfResponsibilityId { get; set; }

        /// <summary>
        /// Gets or sets reference id of the area of education.
        /// </summary>
        [JsonProperty(PropertyName = "areaOfEducationId")]
        public System.Guid? AreaOfEducationId { get; set; }

        /// <summary>
        /// Gets or sets reference id of the day calendar.
        /// </summary>
        [JsonProperty(PropertyName = "dayCalendarId")]
        public System.Guid? DayCalendarId { get; set; }

        /// <summary>
        /// Gets or sets reference id of the school hours plan.
        /// </summary>
        [JsonProperty(PropertyName = "schoolHoursPlanId")]
        public System.Guid? SchoolHoursPlanId { get; set; }

        /// <summary>
        /// Gets or sets guid
        /// </summary>
        /// <remarks>
        /// Reference id of the department.
        /// </remarks>
        [JsonProperty(PropertyName = "departmentId")]
        public System.Guid DepartmentId { get; set; }

        /// <summary>
        /// Gets or sets reference ids to assigned students.
        /// </summary>
        [JsonProperty(PropertyName = "studentsIds")]
        public IList<System.Guid> StudentsIds { get; set; }

        /// <summary>
        /// Gets or sets the participants for the entire subject course.
        /// </summary>
        [JsonProperty(PropertyName = "participants")]
        public IList<EducationalProgrammesExternalResponseStudentParticipation> Participants { get; set; }

        /// <summary>
        /// Gets or sets reference ids to the subject courses that are
        /// associated with the educational programme
        /// </summary>
        [JsonProperty(PropertyName = "subjectCourseIds")]
        public IList<System.Guid> SubjectCourseIds { get; set; }

        /// <summary>
        /// Gets or sets if the educational programme has been deleted, this
        /// property will have a value
        /// </summary>
        [JsonProperty(PropertyName = "deletedAt")]
        public System.DateTime? DeletedAt { get; set; }

        /// <summary>
        /// Gets or sets when it was created
        /// </summary>
        [JsonProperty(PropertyName = "insertedAt")]
        public System.DateTime? InsertedAt { get; set; }

        /// <summary>
        /// Gets or sets last update of the educational programme's basic
        /// information
        /// </summary>
        [JsonProperty(PropertyName = "updatedAt")]
        public System.DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (StudentsIds == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "StudentsIds");
            }
            if (Participants == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Participants");
            }
            if (SubjectCourseIds == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SubjectCourseIds");
            }
            if (Name != null)
            {
                if (Name.Length < 1)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Name", 1);
                }
            }
            if (Participants != null)
            {
                foreach (var element in Participants)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
