// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Kmd.Studica.SchoolAdministration.Client.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// AreaOfResponsibilityExternalResponse
    /// </summary>
    /// <remarks>
    /// The model of area of responsibility.
    /// </remarks>
    public partial class AreaOfResponsibilityExternalResponse
    {
        /// <summary>
        /// Initializes a new instance of the
        /// AreaOfResponsibilityExternalResponse class.
        /// </summary>
        public AreaOfResponsibilityExternalResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// AreaOfResponsibilityExternalResponse class.
        /// </summary>
        /// <param name="id">Identifier of the area of responsibility.</param>
        /// <param name="name">String</param>
        /// <param name="validFrom">Date</param>
        /// <param name="validTo">End date of the area of
        /// responsibiliity.</param>
        /// <param name="responsibleEmployeeId">Identifier of employee
        /// responsible for area.</param>
        /// <param name="insertedAt">When was area of responsibility
        /// created</param>
        /// <param name="updatedAt">Last update of the area of
        /// responsibility</param>
        public AreaOfResponsibilityExternalResponse(System.Guid id, string name, System.DateTime validFrom, System.DateTime? validTo = default(System.DateTime?), System.Guid? responsibleEmployeeId = default(System.Guid?), System.DateTime? insertedAt = default(System.DateTime?), System.DateTime? updatedAt = default(System.DateTime?))
        {
            Id = id;
            Name = name;
            ValidFrom = validFrom;
            ValidTo = validTo;
            ResponsibleEmployeeId = responsibleEmployeeId;
            InsertedAt = insertedAt;
            UpdatedAt = updatedAt;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets identifier of the area of responsibility.
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// Gets or sets string
        /// </summary>
        /// <remarks>
        /// Name of the area of responsibility.
        /// </remarks>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets date
        /// </summary>
        /// <remarks>
        /// Start date of the area of responsibility.
        /// </remarks>
        [JsonConverter(typeof(DateJsonConverter))]
        [JsonProperty(PropertyName = "validFrom")]
        public System.DateTime ValidFrom { get; set; }

        /// <summary>
        /// Gets or sets end date of the area of responsibiliity.
        /// </summary>
        [JsonConverter(typeof(DateJsonConverter))]
        [JsonProperty(PropertyName = "validTo")]
        public System.DateTime? ValidTo { get; set; }

        /// <summary>
        /// Gets or sets identifier of employee responsible for area.
        /// </summary>
        [JsonProperty(PropertyName = "responsibleEmployeeId")]
        public System.Guid? ResponsibleEmployeeId { get; set; }

        /// <summary>
        /// Gets or sets when was area of responsibility created
        /// </summary>
        [JsonProperty(PropertyName = "insertedAt")]
        public System.DateTime? InsertedAt { get; set; }

        /// <summary>
        /// Gets or sets last update of the area of responsibility
        /// </summary>
        [JsonProperty(PropertyName = "updatedAt")]
        public System.DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Name != null)
            {
                if (Name.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Name", 255);
                }
                if (Name.Length < 1)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Name", 1);
                }
            }
        }
    }
}
