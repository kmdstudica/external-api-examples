// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Kmd.Studica.SchoolAdministration.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// FindSchoolHourEntryExternalRequest
    /// </summary>
    /// <remarks>
    /// Returns ID of lecture school entry that match criteria.
    /// </remarks>
    public partial class FindSchoolHourEntryExternalRequest
    {
        /// <summary>
        /// Initializes a new instance of the
        /// FindSchoolHourEntryExternalRequest class.
        /// </summary>
        public FindSchoolHourEntryExternalRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// FindSchoolHourEntryExternalRequest class.
        /// </summary>
        /// <param name="schoolHoursPlanId">The identifier of School Hours
        /// Plan.</param>
        /// <param name="startTime">Start time of lecture.</param>
        /// <param name="endTime">End time of lecture.</param>
        /// <param name="schoolCode">The school code for which to get
        /// data.</param>
        public FindSchoolHourEntryExternalRequest(System.Guid schoolHoursPlanId, string startTime, string endTime, string schoolCode)
        {
            SchoolHoursPlanId = schoolHoursPlanId;
            StartTime = startTime;
            EndTime = endTime;
            SchoolCode = schoolCode;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the identifier of School Hours Plan.
        /// </summary>
        [JsonProperty(PropertyName = "schoolHoursPlanId")]
        public System.Guid SchoolHoursPlanId { get; set; }

        /// <summary>
        /// Gets or sets start time of lecture.
        /// </summary>
        [JsonProperty(PropertyName = "startTime")]
        public string StartTime { get; set; }

        /// <summary>
        /// Gets or sets end time of lecture.
        /// </summary>
        [JsonProperty(PropertyName = "endTime")]
        public string EndTime { get; set; }

        /// <summary>
        /// Gets or sets the school code for which to get data.
        /// </summary>
        [JsonProperty(PropertyName = "schoolCode")]
        public string SchoolCode { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (StartTime == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "StartTime");
            }
            if (EndTime == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "EndTime");
            }
            if (SchoolCode == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SchoolCode");
            }
            if (StartTime != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(StartTime, "([01]?[0-9]|2[0-3]):[0-5][0-9]"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "StartTime", "([01]?[0-9]|2[0-3]):[0-5][0-9]");
                }
            }
            if (EndTime != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(EndTime, "([01]?[0-9]|2[0-3]):[0-5][0-9]"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "EndTime", "([01]?[0-9]|2[0-3]):[0-5][0-9]");
                }
            }
            if (SchoolCode != null)
            {
                if (SchoolCode.Length > 6)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "SchoolCode", 6);
                }
                if (SchoolCode.Length < 6)
                {
                    throw new ValidationException(ValidationRules.MinLength, "SchoolCode", 6);
                }
            }
        }
    }
}
