// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Kmd.Studica.SchoolAdministration.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// RoomExternalResponse
    /// </summary>
    /// <remarks>
    /// Model of the room.
    /// </remarks>
    public partial class RoomExternalResponse
    {
        /// <summary>
        /// Initializes a new instance of the RoomExternalResponse class.
        /// </summary>
        public RoomExternalResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RoomExternalResponse class.
        /// </summary>
        /// <param name="id">Guid</param>
        /// <param name="designation">String</param>
        /// <param name="roomType">RoomType</param>
        /// <param name="useDsDepartmentAddress">Boolean</param>
        /// <param name="departmentIds">Departments that room is used
        /// by.</param>
        /// <param name="name">String</param>
        /// <param name="description">String</param>
        /// <param name="capacity">Capacity for meetings.</param>
        /// <param name="maximumPersonsAllowed">Maximum persons allowed in the
        /// room.</param>
        /// <param name="addressLine">String</param>
        /// <param name="city">String</param>
        /// <param name="postalCode">String</param>
        /// <param name="dsDepartmentNumber">String</param>
        /// <param name="insertedAt">When was room created</param>
        /// <param name="updatedAt">Last update of the room</param>
        public RoomExternalResponse(System.Guid id, string designation, string roomType, bool useDsDepartmentAddress, IList<System.Guid> departmentIds, string name = default(string), string description = default(string), int? capacity = default(int?), int? maximumPersonsAllowed = default(int?), string addressLine = default(string), string city = default(string), string postalCode = default(string), string dsDepartmentNumber = default(string), System.DateTime? insertedAt = default(System.DateTime?), System.DateTime? updatedAt = default(System.DateTime?))
        {
            Id = id;
            Name = name;
            Designation = designation;
            Description = description;
            RoomType = roomType;
            Capacity = capacity;
            MaximumPersonsAllowed = maximumPersonsAllowed;
            UseDsDepartmentAddress = useDsDepartmentAddress;
            AddressLine = addressLine;
            City = city;
            PostalCode = postalCode;
            DsDepartmentNumber = dsDepartmentNumber;
            DepartmentIds = departmentIds;
            InsertedAt = insertedAt;
            UpdatedAt = updatedAt;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets guid
        /// </summary>
        /// <remarks>
        /// Id of the room.
        /// </remarks>
        [JsonProperty(PropertyName = "id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// Gets or sets string
        /// </summary>
        /// <remarks>
        /// Name of the room.
        /// </remarks>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets string
        /// </summary>
        /// <remarks>
        /// The acronym or designation (user facing unique id) of the room
        /// </remarks>
        [JsonProperty(PropertyName = "designation")]
        public string Designation { get; set; }

        /// <summary>
        /// Gets or sets string
        /// </summary>
        /// <remarks>
        /// Description of the room.
        /// </remarks>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets roomType
        /// </summary>
        /// <remarks>
        /// Type of room. Possible values include: 'ClassRoom', 'Lab',
        /// 'Workshop', 'Gym', 'Auditorium', 'MeetingRoom', 'Other'
        /// </remarks>
        [JsonProperty(PropertyName = "roomType")]
        public string RoomType { get; set; }

        /// <summary>
        /// Gets or sets capacity for meetings.
        /// </summary>
        [JsonProperty(PropertyName = "capacity")]
        public int? Capacity { get; set; }

        /// <summary>
        /// Gets or sets maximum persons allowed in the room.
        /// </summary>
        [JsonProperty(PropertyName = "maximumPersonsAllowed")]
        public int? MaximumPersonsAllowed { get; set; }

        /// <summary>
        /// Gets or sets boolean
        /// </summary>
        /// <remarks>
        /// Denotes if the room uses the address of the DS department,
        /// or has a custom address
        /// </remarks>
        [JsonProperty(PropertyName = "useDsDepartmentAddress")]
        public bool UseDsDepartmentAddress { get; set; }

        /// <summary>
        /// Gets or sets string
        /// </summary>
        /// <remarks>
        /// Address of the building where the room is located.
        /// </remarks>
        [JsonProperty(PropertyName = "addressLine")]
        public string AddressLine { get; set; }

        /// <summary>
        /// Gets or sets string
        /// </summary>
        /// <remarks>
        /// City of the building where the room is located.
        /// </remarks>
        [JsonProperty(PropertyName = "city")]
        public string City { get; set; }

        /// <summary>
        /// Gets or sets string
        /// </summary>
        /// <remarks>
        /// Postal code of the building where the room is located.
        /// </remarks>
        [JsonProperty(PropertyName = "postalCode")]
        public string PostalCode { get; set; }

        /// <summary>
        /// Gets or sets string
        /// </summary>
        /// <remarks>
        /// The DS-department number that room belongs to.
        /// </remarks>
        [JsonProperty(PropertyName = "dsDepartmentNumber")]
        public string DsDepartmentNumber { get; set; }

        /// <summary>
        /// Gets or sets departments that room is used by.
        /// </summary>
        [JsonProperty(PropertyName = "departmentIds")]
        public IList<System.Guid> DepartmentIds { get; set; }

        /// <summary>
        /// Gets or sets when was room created
        /// </summary>
        [JsonProperty(PropertyName = "insertedAt")]
        public System.DateTime? InsertedAt { get; set; }

        /// <summary>
        /// Gets or sets last update of the room
        /// </summary>
        [JsonProperty(PropertyName = "updatedAt")]
        public System.DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Designation == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Designation");
            }
            if (RoomType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "RoomType");
            }
            if (DepartmentIds == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DepartmentIds");
            }
            if (Designation != null)
            {
                if (Designation.Length < 1)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Designation", 1);
                }
            }
        }
    }
}
