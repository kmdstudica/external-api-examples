// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Kmd.Studica.SchoolAdministration.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// RoomExternalResponse
    /// </summary>
    /// <remarks>
    /// Model of the room.
    /// </remarks>
    public partial class RoomExternalResponse
    {
        /// <summary>
        /// Initializes a new instance of the RoomExternalResponse class.
        /// </summary>
        public RoomExternalResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RoomExternalResponse class.
        /// </summary>
        /// <param name="id">Id of the room.</param>
        /// <param name="name">Name of the room.</param>
        /// <param name="designation">Acronym used for the room.</param>
        /// <param name="roomType">Type of room. Possible values include:
        /// 'ClassRoom', 'Lab', 'Workshop', 'Gym', 'Auditorium', 'MeetingRoom',
        /// 'Other'</param>
        /// <param name="departmentIds">Departments that room is used
        /// by.</param>
        /// <param name="description">Description of the room.</param>
        /// <param name="capacity">Capacity for meetings.</param>
        /// <param name="maximumPersonsAllowed">Maximum persons allowed in the
        /// room.</param>
        /// <param name="addressLine">Address of the building where the room is
        /// located.</param>
        /// <param name="city">City of the building where the room is
        /// located.</param>
        /// <param name="postalCode">Postal code of the building where the room
        /// is located.</param>
        /// <param name="dsDepartmentNumber">The DS-department number that room
        /// belongs to.</param>
        public RoomExternalResponse(System.Guid id, string name, string designation, string roomType, IList<System.Guid> departmentIds, string description = default(string), int? capacity = default(int?), int? maximumPersonsAllowed = default(int?), string addressLine = default(string), string city = default(string), string postalCode = default(string), string dsDepartmentNumber = default(string))
        {
            Id = id;
            Name = name;
            Designation = designation;
            Description = description;
            RoomType = roomType;
            Capacity = capacity;
            MaximumPersonsAllowed = maximumPersonsAllowed;
            AddressLine = addressLine;
            City = city;
            PostalCode = postalCode;
            DsDepartmentNumber = dsDepartmentNumber;
            DepartmentIds = departmentIds;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets id of the room.
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// Gets or sets name of the room.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets acronym used for the room.
        /// </summary>
        [JsonProperty(PropertyName = "designation")]
        public string Designation { get; set; }

        /// <summary>
        /// Gets or sets description of the room.
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets type of room. Possible values include: 'ClassRoom',
        /// 'Lab', 'Workshop', 'Gym', 'Auditorium', 'MeetingRoom', 'Other'
        /// </summary>
        [JsonProperty(PropertyName = "roomType")]
        public string RoomType { get; set; }

        /// <summary>
        /// Gets or sets capacity for meetings.
        /// </summary>
        [JsonProperty(PropertyName = "capacity")]
        public int? Capacity { get; set; }

        /// <summary>
        /// Gets or sets maximum persons allowed in the room.
        /// </summary>
        [JsonProperty(PropertyName = "maximumPersonsAllowed")]
        public int? MaximumPersonsAllowed { get; set; }

        /// <summary>
        /// Gets or sets address of the building where the room is located.
        /// </summary>
        [JsonProperty(PropertyName = "addressLine")]
        public string AddressLine { get; set; }

        /// <summary>
        /// Gets or sets city of the building where the room is located.
        /// </summary>
        [JsonProperty(PropertyName = "city")]
        public string City { get; set; }

        /// <summary>
        /// Gets or sets postal code of the building where the room is located.
        /// </summary>
        [JsonProperty(PropertyName = "postalCode")]
        public string PostalCode { get; set; }

        /// <summary>
        /// Gets or sets the DS-department number that room belongs to.
        /// </summary>
        [JsonProperty(PropertyName = "dsDepartmentNumber")]
        public string DsDepartmentNumber { get; set; }

        /// <summary>
        /// Gets or sets departments that room is used by.
        /// </summary>
        [JsonProperty(PropertyName = "departmentIds")]
        public IList<System.Guid> DepartmentIds { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Designation == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Designation");
            }
            if (RoomType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "RoomType");
            }
            if (DepartmentIds == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DepartmentIds");
            }
        }
    }
}
