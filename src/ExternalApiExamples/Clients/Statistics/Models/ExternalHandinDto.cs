// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Kmd.Studica.Statistics.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// ExternalHandinDto
    /// </summary>
    public partial class ExternalHandinDto
    {
        /// <summary>
        /// Initializes a new instance of the ExternalHandinDto class.
        /// </summary>
        public ExternalHandinDto()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ExternalHandinDto class.
        /// </summary>
        /// <param name="handinId">Guid</param>
        /// <param name="studentIds">ID of the student(s) that the handin
        /// relates to (Studica StudentId's)</param>
        /// <param name="assignmentId">Guid</param>
        /// <param name="assignmentTitle">String</param>
        /// <param name="assignmentType">AssignmentType</param>
        /// <param name="deadline">DateTime</param>
        /// <param name="markScale">MarkScale</param>
        /// <param name="status">HandinStatus</param>
        /// <param name="deliveryTime">Timestamp of the student's delivery of
        /// the handin</param>
        /// <param name="feedbackTime">Timestamp of when the teacher has
        /// provided feedback</param>
        /// <param name="markValue">String</param>
        /// <param name="immersionTimeInMinutes">Time (in minutes) related to
        /// the assignment/handin</param>
        /// <param name="feedback">String</param>
        /// <param name="rejectedReason">String</param>
        /// <param name="connectedTopicTitle">String</param>
        /// <param name="plagiarismScore">Plagiarism score (0 - 100)</param>
        /// <param name="assignmentUrl">String</param>
        public ExternalHandinDto(System.Guid handinId, IList<System.Guid> studentIds, System.Guid assignmentId, string assignmentTitle, string assignmentType, System.DateTime deadline, string markScale, string status, System.DateTime? deliveryTime = default(System.DateTime?), System.DateTime? feedbackTime = default(System.DateTime?), string markValue = default(string), int? immersionTimeInMinutes = default(int?), string feedback = default(string), string rejectedReason = default(string), string connectedTopicTitle = default(string), int? plagiarismScore = default(int?), string assignmentUrl = default(string))
        {
            HandinId = handinId;
            StudentIds = studentIds;
            AssignmentId = assignmentId;
            AssignmentTitle = assignmentTitle;
            AssignmentType = assignmentType;
            Deadline = deadline;
            DeliveryTime = deliveryTime;
            FeedbackTime = feedbackTime;
            MarkScale = markScale;
            MarkValue = markValue;
            ImmersionTimeInMinutes = immersionTimeInMinutes;
            Status = status;
            Feedback = feedback;
            RejectedReason = rejectedReason;
            ConnectedTopicTitle = connectedTopicTitle;
            PlagiarismScore = plagiarismScore;
            AssignmentUrl = assignmentUrl;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets guid
        /// </summary>
        /// <remarks>
        /// The ID of the handin
        /// </remarks>
        [JsonProperty(PropertyName = "handinId")]
        public System.Guid HandinId { get; set; }

        /// <summary>
        /// Gets or sets ID of the student(s) that the handin relates to
        /// (Studica StudentId's)
        /// </summary>
        [JsonProperty(PropertyName = "studentIds")]
        public IList<System.Guid> StudentIds { get; set; }

        /// <summary>
        /// Gets or sets guid
        /// </summary>
        /// <remarks>
        /// ID of the assignment
        /// </remarks>
        [JsonProperty(PropertyName = "assignmentId")]
        public System.Guid AssignmentId { get; set; }

        /// <summary>
        /// Gets or sets string
        /// </summary>
        /// <remarks>
        /// Title of the assignment
        /// </remarks>
        [JsonProperty(PropertyName = "assignmentTitle")]
        public string AssignmentTitle { get; set; }

        /// <summary>
        /// Gets or sets assignmentType
        /// </summary>
        /// <remarks>
        /// Type of assignment. Possible values include: 'Individual',
        /// 'TeacherCreatedGroup', 'StudentCreatedGroup',
        /// 'DifferentTasksIndividual'
        /// </remarks>
        [JsonProperty(PropertyName = "assignmentType")]
        public string AssignmentType { get; set; }

        /// <summary>
        /// Gets or sets dateTime
        /// </summary>
        /// <remarks>
        /// Deadline for the assignment
        /// </remarks>
        [JsonProperty(PropertyName = "deadline")]
        public System.DateTime Deadline { get; set; }

        /// <summary>
        /// Gets or sets timestamp of the student's delivery of the handin
        /// </summary>
        [JsonProperty(PropertyName = "deliveryTime")]
        public System.DateTime? DeliveryTime { get; set; }

        /// <summary>
        /// Gets or sets timestamp of when the teacher has provided feedback
        /// </summary>
        [JsonProperty(PropertyName = "feedbackTime")]
        public System.DateTime? FeedbackTime { get; set; }

        /// <summary>
        /// Gets or sets markScale
        /// </summary>
        /// <remarks>
        /// The mark scale used for grading. Possible values include:
        /// 'PassedNotPassed', 'SevenPointScale', 'PercentScale', 'NoMarks'
        /// </remarks>
        [JsonProperty(PropertyName = "markScale")]
        public string MarkScale { get; set; }

        /// <summary>
        /// Gets or sets string
        /// </summary>
        /// <remarks>
        /// The mark value given to the student(s) for the handin
        /// Note that this is mark values used in Teams, which differs somewhat
        /// from UMO mark values
        /// </remarks>
        [JsonProperty(PropertyName = "markValue")]
        public string MarkValue { get; set; }

        /// <summary>
        /// Gets or sets time (in minutes) related to the assignment/handin
        /// </summary>
        [JsonProperty(PropertyName = "immersionTimeInMinutes")]
        public int? ImmersionTimeInMinutes { get; set; }

        /// <summary>
        /// Gets or sets handinStatus
        /// </summary>
        /// <remarks>
        /// Status for the handin (not submitted, submitted, rejected).
        /// Possible values include: 'NotSubmitted', 'Submitted', 'Rejected'
        /// </remarks>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// Gets or sets string
        /// </summary>
        /// <remarks>
        /// Textual feedback on the handin
        /// </remarks>
        [JsonProperty(PropertyName = "feedback")]
        public string Feedback { get; set; }

        /// <summary>
        /// Gets or sets string
        /// </summary>
        /// <remarks>
        /// Reason for rejection (if status is rejected)
        /// </remarks>
        [JsonProperty(PropertyName = "rejectedReason")]
        public string RejectedReason { get; set; }

        /// <summary>
        /// Gets or sets string
        /// </summary>
        /// <remarks>
        /// Title of connected topic
        /// </remarks>
        [JsonProperty(PropertyName = "connectedTopicTitle")]
        public string ConnectedTopicTitle { get; set; }

        /// <summary>
        /// Gets or sets plagiarism score (0 - 100)
        /// </summary>
        [JsonProperty(PropertyName = "plagiarismScore")]
        public int? PlagiarismScore { get; set; }

        /// <summary>
        /// Gets or sets string
        /// </summary>
        /// <remarks>
        /// Url to the assignment
        /// </remarks>
        [JsonProperty(PropertyName = "assignmentUrl")]
        public string AssignmentUrl { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (StudentIds == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "StudentIds");
            }
            if (AssignmentTitle == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AssignmentTitle");
            }
            if (AssignmentType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AssignmentType");
            }
            if (MarkScale == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "MarkScale");
            }
            if (Status == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Status");
            }
            if (StudentIds != null)
            {
                if (StudentIds.Count < 1)
                {
                    throw new ValidationException(ValidationRules.MinItems, "StudentIds", 1);
                }
            }
            if (AssignmentTitle != null)
            {
                if (AssignmentTitle.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "AssignmentTitle", 255);
                }
                if (AssignmentTitle.Length < 1)
                {
                    throw new ValidationException(ValidationRules.MinLength, "AssignmentTitle", 1);
                }
            }
            if (Feedback != null)
            {
                if (Feedback.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Feedback", 255);
                }
            }
            if (RejectedReason != null)
            {
                if (RejectedReason.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "RejectedReason", 255);
                }
            }
            if (ConnectedTopicTitle != null)
            {
                if (ConnectedTopicTitle.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "ConnectedTopicTitle", 255);
                }
            }
            if (PlagiarismScore > 100)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "PlagiarismScore", 100);
            }
            if (PlagiarismScore < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "PlagiarismScore", 0);
            }
            if (AssignmentUrl != null)
            {
                if (AssignmentUrl.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "AssignmentUrl", 255);
                }
            }
        }
    }
}
