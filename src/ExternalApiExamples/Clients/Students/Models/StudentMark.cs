// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Kmd.Studica.Students.Client.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Student_Mark
    /// </summary>
    public partial class StudentMark
    {
        /// <summary>
        /// Initializes a new instance of the StudentMark class.
        /// </summary>
        public StudentMark()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the StudentMark class.
        /// </summary>
        /// <param name="useOnExamPaper">Boolean</param>
        /// <param name="examMarkSource">ExamMarkSource</param>
        /// <param name="date">Date for when mark has been given</param>
        /// <param name="markCode">String</param>
        /// <param name="markDesignation">String</param>
        /// <param name="markValue">String</param>
        /// <param name="markValueEcts">String</param>
        /// <param name="creditText">String</param>
        /// <param name="subjectCourseId">The ID of the subject course for
        /// which the mark has been given
        /// If the ID is null, then the mark has been assigned manually</param>
        /// <param name="subject">Subject that the mark is given for</param>
        public StudentMark(bool useOnExamPaper, string examMarkSource, System.DateTime? date = default(System.DateTime?), string markCode = default(string), string markDesignation = default(string), string markValue = default(string), string markValueEcts = default(string), string creditText = default(string), System.Guid? subjectCourseId = default(System.Guid?), StudentMarkSubject subject = default(StudentMarkSubject))
        {
            Date = date;
            MarkCode = markCode;
            MarkDesignation = markDesignation;
            MarkValue = markValue;
            MarkValueEcts = markValueEcts;
            CreditText = creditText;
            UseOnExamPaper = useOnExamPaper;
            SubjectCourseId = subjectCourseId;
            Subject = subject;
            ExamMarkSource = examMarkSource;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets date for when mark has been given
        /// </summary>
        [JsonConverter(typeof(DateJsonConverter))]
        [JsonProperty(PropertyName = "date")]
        public System.DateTime? Date { get; set; }

        /// <summary>
        /// Gets or sets string
        /// </summary>
        /// <remarks>
        /// Code of the mark type in the Danish educational model (UMO), e.g.
        /// DEL or STA
        /// </remarks>
        [JsonProperty(PropertyName = "markCode")]
        public string MarkCode { get; set; }

        /// <summary>
        /// Gets or sets string
        /// </summary>
        /// <remarks>
        /// Designation/desciption text of the mark type in the Danish
        /// educational model (UMO), e.g. 00, Over middel or Syg
        /// </remarks>
        [JsonProperty(PropertyName = "markDesignation")]
        public string MarkDesignation { get; set; }

        /// <summary>
        /// Gets or sets string
        /// </summary>
        /// <remarks>
        /// Value of the mark, e.g. 00, 7 or SY
        /// </remarks>
        [JsonProperty(PropertyName = "markValue")]
        public string MarkValue { get; set; }

        /// <summary>
        /// Gets or sets string
        /// </summary>
        /// <remarks>
        /// The mark value in ECTS scale
        /// </remarks>
        [JsonProperty(PropertyName = "markValueEcts")]
        public string MarkValueEcts { get; set; }

        /// <summary>
        /// Gets or sets string
        /// </summary>
        /// <remarks>
        /// The text describing the credit (not set if ordinary mark)
        /// </remarks>
        [JsonProperty(PropertyName = "creditText")]
        public string CreditText { get; set; }

        /// <summary>
        /// Gets or sets boolean
        /// </summary>
        /// <remarks>
        /// Flag to describe whether the mark should be included on the
        /// student's exam paper
        /// </remarks>
        [JsonProperty(PropertyName = "useOnExamPaper")]
        public bool UseOnExamPaper { get; set; }

        /// <summary>
        /// Gets or sets the ID of the subject course for which the mark has
        /// been given
        /// If the ID is null, then the mark has been assigned manually
        /// </summary>
        [JsonProperty(PropertyName = "subjectCourseId")]
        public System.Guid? SubjectCourseId { get; set; }

        /// <summary>
        /// Gets or sets subject that the mark is given for
        /// </summary>
        [JsonProperty(PropertyName = "subject")]
        public StudentMarkSubject Subject { get; set; }

        /// <summary>
        /// Gets or sets examMarkSource
        /// </summary>
        /// <remarks>
        /// What kind of mark it is. eg manual or from netproever. Possible
        /// values include: 'Manual', 'SubjectCourse', 'DigitalExamination',
        /// 'XprsExamination'
        /// </remarks>
        [JsonProperty(PropertyName = "examMarkSource")]
        public string ExamMarkSource { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ExamMarkSource == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ExamMarkSource");
            }
            if (Subject != null)
            {
                Subject.Validate();
            }
        }
    }
}
