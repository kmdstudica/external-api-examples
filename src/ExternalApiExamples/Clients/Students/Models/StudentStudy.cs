// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Kmd.Studica.Students.Client.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Student_Study
    /// </summary>
    public partial class StudentStudy
    {
        /// <summary>
        /// Initializes a new instance of the StudentStudy class.
        /// </summary>
        public StudentStudy()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the StudentStudy class.
        /// </summary>
        /// <param name="id">Guid</param>
        /// <param name="departmentId">Guid</param>
        /// <param name="educationId">Guid</param>
        /// <param name="studyStartDate">Date</param>
        /// <param name="studentTypes">StudentTypes associated with the
        /// student.</param>
        /// <param name="dsDepartmentNumber">String</param>
        /// <param name="educationName">String</param>
        /// <param name="coesa">String</param>
        /// <param name="educationVersion">String</param>
        /// <param name="studyExpectedCompletionDate">Expected completion date
        /// of study.</param>
        /// <param name="studyEndDate">Study end date</param>
        /// <param name="studyEndCauseId">Id of study end cause</param>
        /// <param name="studyEndCauseCode">String</param>
        /// <param name="studyEndCause">String</param>
        /// <param name="studyCancellationCauseCode">The cancellation code for
        /// ending the study. Possible values include: 'StudyNotStarted',
        /// 'Absence', 'Illness', 'EducationalRequirements', 'ChangedStudy',
        /// 'ChangedSchool', 'ChangedSchoolAndChangedStudy', 'Other',
        /// 'Unknown', 'Deceased', 'WrittenAgreementTerminated',
        /// 'CompletedGF2NotContinuing', 'NotPassedFinalExam',
        /// 'AdmissionExamNotPassedAndInterviewDenied',
        /// 'AdmissionExamNotPassedAndDidNotShowAtInterview',
        /// 'AdmissionInterviewNotPassed',
        /// 'AdmissionExamPassedButInterviewDenied',
        /// 'AdmissionExamPassedButDidNotShowAtInterview', 'NotStarted',
        /// 'ProfessionalRequirements', 'PrivateReasons', 'ExamNotPassed',
        /// 'Expelled', 'Unreachable', 'ChangeOfEducation', 'ChangeOfSchool',
        /// 'CompletedGf1OrPlus', 'CompletedGf2', 'CancelledExchangeStudent',
        /// 'LeaveOfAbsence', 'Completed', 'Death',
        /// 'TeacherRelationCancelled'</param>
        public StudentStudy(System.Guid id, System.Guid departmentId, System.Guid educationId, System.DateTime studyStartDate, IList<StudyStudentType> studentTypes, string dsDepartmentNumber = default(string), string educationName = default(string), string coesa = default(string), string educationVersion = default(string), System.DateTime? studyExpectedCompletionDate = default(System.DateTime?), System.DateTime? studyEndDate = default(System.DateTime?), System.Guid? studyEndCauseId = default(System.Guid?), string studyEndCauseCode = default(string), string studyEndCause = default(string), string studyCancellationCauseCode = default(string))
        {
            Id = id;
            DepartmentId = departmentId;
            DsDepartmentNumber = dsDepartmentNumber;
            EducationId = educationId;
            EducationName = educationName;
            Coesa = coesa;
            EducationVersion = educationVersion;
            StudyStartDate = studyStartDate;
            StudyExpectedCompletionDate = studyExpectedCompletionDate;
            StudyEndDate = studyEndDate;
            StudyEndCauseId = studyEndCauseId;
            StudyEndCauseCode = studyEndCauseCode;
            StudyEndCause = studyEndCause;
            StudyCancellationCauseCode = studyCancellationCauseCode;
            StudentTypes = studentTypes;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets guid
        /// </summary>
        /// <remarks>
        /// The id of the study
        /// </remarks>
        [JsonProperty(PropertyName = "id")]
        public System.Guid Id { get; set; }

        /// <summary>
        /// Gets or sets guid
        /// </summary>
        /// <remarks>
        /// Id of the department that student is affiliated to.
        /// </remarks>
        [JsonProperty(PropertyName = "departmentId")]
        public System.Guid DepartmentId { get; set; }

        /// <summary>
        /// Gets or sets string
        /// </summary>
        /// <remarks>
        /// DS Department number that student is affiliated to.
        /// </remarks>
        [JsonProperty(PropertyName = "dsDepartmentNumber")]
        public string DsDepartmentNumber { get; set; }

        /// <summary>
        /// Gets or sets guid
        /// </summary>
        /// <remarks>
        /// Id of the education (from UMO) that the study is linked to
        /// </remarks>
        [JsonProperty(PropertyName = "educationId")]
        public System.Guid EducationId { get; set; }

        /// <summary>
        /// Gets or sets string
        /// </summary>
        /// <remarks>
        /// Name of the education from UMO
        /// </remarks>
        [JsonProperty(PropertyName = "educationName")]
        public string EducationName { get; set; }

        /// <summary>
        /// Gets or sets string
        /// </summary>
        /// <remarks>
        /// CÃ˜SA number of education from UMO
        /// </remarks>
        [JsonProperty(PropertyName = "coesa")]
        public string Coesa { get; set; }

        /// <summary>
        /// Gets or sets string
        /// </summary>
        /// <remarks>
        /// Education version from UMO
        /// </remarks>
        [JsonProperty(PropertyName = "educationVersion")]
        public string EducationVersion { get; set; }

        /// <summary>
        /// Gets or sets date
        /// </summary>
        /// <remarks>
        /// Study date of start.
        /// </remarks>
        [JsonConverter(typeof(DateJsonConverter))]
        [JsonProperty(PropertyName = "studyStartDate")]
        public System.DateTime StudyStartDate { get; set; }

        /// <summary>
        /// Gets or sets expected completion date of study.
        /// </summary>
        [JsonConverter(typeof(DateJsonConverter))]
        [JsonProperty(PropertyName = "studyExpectedCompletionDate")]
        public System.DateTime? StudyExpectedCompletionDate { get; set; }

        /// <summary>
        /// Gets or sets study end date
        /// </summary>
        [JsonConverter(typeof(DateJsonConverter))]
        [JsonProperty(PropertyName = "studyEndDate")]
        public System.DateTime? StudyEndDate { get; set; }

        /// <summary>
        /// Gets or sets id of study end cause
        /// </summary>
        [JsonProperty(PropertyName = "studyEndCauseId")]
        public System.Guid? StudyEndCauseId { get; set; }

        /// <summary>
        /// Gets or sets string
        /// </summary>
        /// <remarks>
        /// The UMO code for ending the study
        /// </remarks>
        [JsonProperty(PropertyName = "studyEndCauseCode")]
        public string StudyEndCauseCode { get; set; }

        /// <summary>
        /// Gets or sets string
        /// </summary>
        /// <remarks>
        /// UMO description for cause for study end.
        /// </remarks>
        [JsonProperty(PropertyName = "studyEndCause")]
        public string StudyEndCause { get; set; }

        /// <summary>
        /// Gets or sets the cancellation code for ending the study. Possible
        /// values include: 'StudyNotStarted', 'Absence', 'Illness',
        /// 'EducationalRequirements', 'ChangedStudy', 'ChangedSchool',
        /// 'ChangedSchoolAndChangedStudy', 'Other', 'Unknown', 'Deceased',
        /// 'WrittenAgreementTerminated', 'CompletedGF2NotContinuing',
        /// 'NotPassedFinalExam', 'AdmissionExamNotPassedAndInterviewDenied',
        /// 'AdmissionExamNotPassedAndDidNotShowAtInterview',
        /// 'AdmissionInterviewNotPassed',
        /// 'AdmissionExamPassedButInterviewDenied',
        /// 'AdmissionExamPassedButDidNotShowAtInterview', 'NotStarted',
        /// 'ProfessionalRequirements', 'PrivateReasons', 'ExamNotPassed',
        /// 'Expelled', 'Unreachable', 'ChangeOfEducation', 'ChangeOfSchool',
        /// 'CompletedGf1OrPlus', 'CompletedGf2', 'CancelledExchangeStudent',
        /// 'LeaveOfAbsence', 'Completed', 'Death', 'TeacherRelationCancelled'
        /// </summary>
        [JsonProperty(PropertyName = "studyCancellationCauseCode")]
        public string StudyCancellationCauseCode { get; set; }

        /// <summary>
        /// Gets or sets studentTypes associated with the student.
        /// </summary>
        [JsonProperty(PropertyName = "studentTypes")]
        public IList<StudyStudentType> StudentTypes { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (StudentTypes == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "StudentTypes");
            }
            if (StudentTypes != null)
            {
                foreach (var element in StudentTypes)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
