// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Kmd.Studica.Students.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// UpdateContactAndAccountInfoExternalCommand
    /// </summary>
    /// <remarks>
    /// Update student contact and account information
    /// </remarks>
    public partial class UpdateContactAndAccountInfoExternalCommand
    {
        /// <summary>
        /// Initializes a new instance of the
        /// UpdateContactAndAccountInfoExternalCommand class.
        /// </summary>
        public UpdateContactAndAccountInfoExternalCommand()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// UpdateContactAndAccountInfoExternalCommand class.
        /// </summary>
        /// <param name="studentId">The ID of the student.</param>
        /// <param name="addressLineClear">Boolean</param>
        /// <param name="careOfAddressClear">Boolean</param>
        /// <param name="cityClear">Boolean</param>
        /// <param name="placeClear">Boolean</param>
        /// <param name="postalCodeClear">Boolean</param>
        /// <param name="countryClear">Boolean</param>
        /// <param name="phoneNumberClear">Boolean</param>
        /// <param name="privateEmailClear">Boolean</param>
        /// <param name="emailClear">Boolean</param>
        /// <param name="givenName">String</param>
        /// <param name="surname">String</param>
        /// <param name="addressLine">String</param>
        /// <param name="careOfAddress">String</param>
        /// <param name="city">String</param>
        /// <param name="place">String</param>
        /// <param name="postalCode">String</param>
        /// <param name="country">String</param>
        /// <param name="phoneNumber">String</param>
        /// <param name="privateEmail">String</param>
        /// <param name="email">String</param>
        /// <param name="adUsername">String</param>
        /// <param name="createAdLogin">Specifies if the student should have an
        /// AD login (organisational account).
        /// If `false`, the
        /// Students.Host.ExternalApi.Students.Commands.UpdateContactAndAccountInfo.UpdateContactAndAccountInfoExternalCommand.AdUsername
        /// will be cleared</param>
        /// <param name="schoolCode">String</param>
        public UpdateContactAndAccountInfoExternalCommand(System.Guid studentId, bool addressLineClear, bool careOfAddressClear, bool cityClear, bool placeClear, bool postalCodeClear, bool countryClear, bool phoneNumberClear, bool privateEmailClear, bool emailClear, string givenName = default(string), string surname = default(string), string addressLine = default(string), string careOfAddress = default(string), string city = default(string), string place = default(string), string postalCode = default(string), string country = default(string), string phoneNumber = default(string), string privateEmail = default(string), string email = default(string), string adUsername = default(string), bool? createAdLogin = default(bool?), string schoolCode = default(string))
        {
            StudentId = studentId;
            GivenName = givenName;
            Surname = surname;
            AddressLine = addressLine;
            AddressLineClear = addressLineClear;
            CareOfAddress = careOfAddress;
            CareOfAddressClear = careOfAddressClear;
            City = city;
            CityClear = cityClear;
            Place = place;
            PlaceClear = placeClear;
            PostalCode = postalCode;
            PostalCodeClear = postalCodeClear;
            Country = country;
            CountryClear = countryClear;
            PhoneNumber = phoneNumber;
            PhoneNumberClear = phoneNumberClear;
            PrivateEmail = privateEmail;
            PrivateEmailClear = privateEmailClear;
            Email = email;
            EmailClear = emailClear;
            AdUsername = adUsername;
            CreateAdLogin = createAdLogin;
            SchoolCode = schoolCode;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the ID of the student.
        /// </summary>
        [JsonProperty(PropertyName = "studentId")]
        public System.Guid StudentId { get; set; }

        /// <summary>
        /// Gets or sets string
        /// </summary>
        /// <remarks>
        /// The student's first- and middle names.
        /// </remarks>
        [JsonProperty(PropertyName = "givenName")]
        public string GivenName { get; set; }

        /// <summary>
        /// Gets or sets string
        /// </summary>
        /// <remarks>
        /// The student's last name.
        /// </remarks>
        [JsonProperty(PropertyName = "surname")]
        public string Surname { get; set; }

        /// <summary>
        /// Gets or sets string
        /// </summary>
        /// <remarks>
        /// Full address including street, house-nr letter, etc. where the
        /// student lives.
        /// </remarks>
        [JsonProperty(PropertyName = "addressLine")]
        public string AddressLine { get; set; }

        /// <summary>
        /// Gets or sets boolean
        /// </summary>
        /// <remarks>
        /// Indicates if the AddressLine should be cleared regardless of the
        /// value in AddressLine
        /// </remarks>
        [JsonProperty(PropertyName = "addressLineClear")]
        public bool AddressLineClear { get; set; }

        /// <summary>
        /// Gets or sets string
        /// </summary>
        /// <remarks>
        /// The C/O address of the student.
        /// </remarks>
        [JsonProperty(PropertyName = "careOfAddress")]
        public string CareOfAddress { get; set; }

        /// <summary>
        /// Gets or sets boolean
        /// </summary>
        /// <remarks>
        /// Indicates if the CareOfAddress should be cleared regardless of the
        /// value in CareOfAddress
        /// </remarks>
        [JsonProperty(PropertyName = "careOfAddressClear")]
        public bool CareOfAddressClear { get; set; }

        /// <summary>
        /// Gets or sets string
        /// </summary>
        /// <remarks>
        /// The city where the student lives.
        /// </remarks>
        [JsonProperty(PropertyName = "city")]
        public string City { get; set; }

        /// <summary>
        /// Gets or sets boolean
        /// </summary>
        /// <remarks>
        /// Indicates if the City should be cleared regardless of the value in
        /// City
        /// </remarks>
        [JsonProperty(PropertyName = "cityClear")]
        public bool CityClear { get; set; }

        /// <summary>
        /// Gets or sets string
        /// </summary>
        /// <remarks>
        /// The place of the student.
        /// </remarks>
        [JsonProperty(PropertyName = "place")]
        public string Place { get; set; }

        /// <summary>
        /// Gets or sets boolean
        /// </summary>
        /// <remarks>
        /// Indicates if the Place should be cleared regardless of the value in
        /// Place
        /// </remarks>
        [JsonProperty(PropertyName = "placeClear")]
        public bool PlaceClear { get; set; }

        /// <summary>
        /// Gets or sets string
        /// </summary>
        /// <remarks>
        /// The matching postal code for the city.
        /// </remarks>
        [JsonProperty(PropertyName = "postalCode")]
        public string PostalCode { get; set; }

        /// <summary>
        /// Gets or sets boolean
        /// </summary>
        /// <remarks>
        /// Indicates if the PostalCode should be cleared regardless of the
        /// value in PostalCode
        /// </remarks>
        [JsonProperty(PropertyName = "postalCodeClear")]
        public bool PostalCodeClear { get; set; }

        /// <summary>
        /// Gets or sets string
        /// </summary>
        /// <remarks>
        /// The country where the student lives.
        /// </remarks>
        [JsonProperty(PropertyName = "country")]
        public string Country { get; set; }

        /// <summary>
        /// Gets or sets boolean
        /// </summary>
        /// <remarks>
        /// Indicates if the Country should be cleared regardless of the value
        /// in Country
        /// </remarks>
        [JsonProperty(PropertyName = "countryClear")]
        public bool CountryClear { get; set; }

        /// <summary>
        /// Gets or sets string
        /// </summary>
        /// <remarks>
        /// The student's phone number.
        /// </remarks>
        [JsonProperty(PropertyName = "phoneNumber")]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Gets or sets boolean
        /// </summary>
        /// <remarks>
        /// Indicates if the PhoneNumber should be cleared regardless of the
        /// value in PhoneNumber
        /// </remarks>
        [JsonProperty(PropertyName = "phoneNumberClear")]
        public bool PhoneNumberClear { get; set; }

        /// <summary>
        /// Gets or sets string
        /// </summary>
        /// <remarks>
        /// The student's private e-mail address.
        /// </remarks>
        [JsonProperty(PropertyName = "privateEmail")]
        public string PrivateEmail { get; set; }

        /// <summary>
        /// Gets or sets boolean
        /// </summary>
        /// <remarks>
        /// Indicates if the PrivateEmail should be cleared regardless of the
        /// value in PrivateEmail
        /// </remarks>
        [JsonProperty(PropertyName = "privateEmailClear")]
        public bool PrivateEmailClear { get; set; }

        /// <summary>
        /// Gets or sets string
        /// </summary>
        /// <remarks>
        /// The student's school email address
        /// </remarks>
        [JsonProperty(PropertyName = "email")]
        public string Email { get; set; }

        /// <summary>
        /// Gets or sets boolean
        /// </summary>
        /// <remarks>
        /// Indicates if the School Email should be cleared regardless of the
        /// value in Email
        /// </remarks>
        [JsonProperty(PropertyName = "emailClear")]
        public bool EmailClear { get; set; }

        /// <summary>
        /// Gets or sets string
        /// </summary>
        /// <remarks>
        /// The AD user name for the student
        /// </remarks>
        [JsonProperty(PropertyName = "adUsername")]
        public string AdUsername { get; set; }

        /// <summary>
        /// Gets or sets specifies if the student should have an AD login
        /// (organisational account).
        /// If `false`, the
        /// Students.Host.ExternalApi.Students.Commands.UpdateContactAndAccountInfo.UpdateContactAndAccountInfoExternalCommand.AdUsername
        /// will be cleared
        /// </summary>
        [JsonProperty(PropertyName = "createAdLogin")]
        public bool? CreateAdLogin { get; set; }

        /// <summary>
        /// Gets or sets string
        /// </summary>
        /// <remarks>
        /// The school code for which command is performed.
        /// </remarks>
        [JsonProperty(PropertyName = "schoolCode")]
        public string SchoolCode { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (GivenName != null)
            {
                if (GivenName.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "GivenName", 255);
                }
            }
            if (Surname != null)
            {
                if (Surname.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Surname", 255);
                }
            }
            if (AddressLine != null)
            {
                if (AddressLine.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "AddressLine", 255);
                }
                if (AddressLine.Length < 1)
                {
                    throw new ValidationException(ValidationRules.MinLength, "AddressLine", 1);
                }
            }
            if (CareOfAddress != null)
            {
                if (CareOfAddress.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "CareOfAddress", 255);
                }
            }
            if (City != null)
            {
                if (City.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "City", 255);
                }
                if (City.Length < 1)
                {
                    throw new ValidationException(ValidationRules.MinLength, "City", 1);
                }
            }
            if (Place != null)
            {
                if (Place.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Place", 255);
                }
            }
            if (PostalCode != null)
            {
                if (PostalCode.Length > 50)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "PostalCode", 50);
                }
            }
            if (Country != null)
            {
                if (Country.Length > 100)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Country", 100);
                }
                if (Country.Length < 1)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Country", 1);
                }
            }
            if (PhoneNumber != null)
            {
                if (PhoneNumber.Length > 12)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "PhoneNumber", 12);
                }
                if (PhoneNumber.Length < 1)
                {
                    throw new ValidationException(ValidationRules.MinLength, "PhoneNumber", 1);
                }
            }
            if (PrivateEmail != null)
            {
                if (PrivateEmail.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "PrivateEmail", 255);
                }
                if (PrivateEmail.Length < 1)
                {
                    throw new ValidationException(ValidationRules.MinLength, "PrivateEmail", 1);
                }
            }
        }
    }
}
