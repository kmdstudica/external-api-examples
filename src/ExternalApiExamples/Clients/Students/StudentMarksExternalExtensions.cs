// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Kmd.Studica.Students.Client
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for StudentMarksExternal.
    /// </summary>
    public static partial class StudentMarksExternalExtensions
    {
            /// <summary>
            /// StudentMarksExternal_Get
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='studentIds'>
            /// A list of students to get marks for
            /// </param>
            /// <param name='onlyIncludeMarksForExamPaper'>
            /// Flag to indicate if service should only return marks that should be
            /// included on exam paper
            /// </param>
            /// <param name='pageNumber'>
            /// Format - int32. The number of the page to return (1 is the first page).
            /// </param>
            /// <param name='pageSize'>
            /// Format - int32. Number of objects per page.
            /// </param>
            /// <param name='inlineCount'>
            /// A flag indicating if total number of items should be included.
            /// </param>
            /// <param name='schoolCode'>
            /// The school code for which to get data.
            /// </param>
            public static PagedResponseStudentMarksExternalResponse Get(this IStudentMarksExternal operations, IList<System.Guid> studentIds, bool onlyIncludeMarksForExamPaper, int pageNumber, int pageSize, bool inlineCount, string schoolCode)
            {
                return operations.GetAsync(studentIds, onlyIncludeMarksForExamPaper, pageNumber, pageSize, inlineCount, schoolCode).GetAwaiter().GetResult();
            }

            /// <summary>
            /// StudentMarksExternal_Get
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='studentIds'>
            /// A list of students to get marks for
            /// </param>
            /// <param name='onlyIncludeMarksForExamPaper'>
            /// Flag to indicate if service should only return marks that should be
            /// included on exam paper
            /// </param>
            /// <param name='pageNumber'>
            /// Format - int32. The number of the page to return (1 is the first page).
            /// </param>
            /// <param name='pageSize'>
            /// Format - int32. Number of objects per page.
            /// </param>
            /// <param name='inlineCount'>
            /// A flag indicating if total number of items should be included.
            /// </param>
            /// <param name='schoolCode'>
            /// The school code for which to get data.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PagedResponseStudentMarksExternalResponse> GetAsync(this IStudentMarksExternal operations, IList<System.Guid> studentIds, bool onlyIncludeMarksForExamPaper, int pageNumber, int pageSize, bool inlineCount, string schoolCode, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(studentIds, onlyIncludeMarksForExamPaper, pageNumber, pageSize, inlineCount, schoolCode, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
